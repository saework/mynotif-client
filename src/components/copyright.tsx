import React from 'react';
import Typography from '@material-ui/core/Typography';

/** В реальных проектах обычно принято компоненты хранить в папках,
 * даже если там (пока) только один корневой файл. Это делается как минимум для будущего расширения.
 * Так же бывают большие и сложные компоненты аля модули, со сложной логикой и структурой.
 * Иногда маленькие компоненты перерастают в такие модули.
 * Чтобы было меньше боли при рефакторинге заранее компоненты кладут в индивидуальные папки.
 * В целом, хорошо придерживаться правила, что всё что относится к компоненте должно лежать
 * рядом с этой компонентой.
 * Обычно это выглядит так:
 * components/
 * --ComponentName/
 * ----components/
 * ------SubComponent/
 * --------index.tsx
 * ----tests/
 * ----utils/
 * ----index.tsx
 * ----interfaces.ts
 * ----constants.ts
 *
 * Так же в react проекте в 90% случаев для именования папок/файлов с компонентами
 * используется PascalCase. т.е. они соответствует фактическому названию компоненты.
 */

/** Так же компоненту в TS чаще всего принято обозначать так:
 *
 * import {FC} from 'react';
 * import {CopyrightProps} from './interfaces
 * const Copyright: FC<CopyrightProps> = () => {...}
 *
 * Если пропсов нет, то всё равно лучше использовать FC
 * const Copyright: FC<> = () => {...}
 *
 * Так правильнее работает типизация, да и в будущем будет легче переписывать
 */

function Copyright() {
  return (
    <Typography variant="body2" color="textSecondary" align="center">
      {'Сервис «Мои уведомления» © '}
      {new Date().getFullYear()}
    </Typography>
  );
}
/** Советую отказаться от default export вообще.
 * Почитай про разницу между default export и named export.
 * Особенно как с ними работает вебпакт, в частности его tree shaking.
 * Но помимо этого, есть вопрос консистентности кода, потому что
 * при дефолтном импорте можно задать любое имя, что усложнит поиск по проекту и просто его восприятие.
 * Плюс усложняется рефакторинг, расширение проекта.
 * Буква O в SOLID - open-closed principle
 */
export default Copyright;
